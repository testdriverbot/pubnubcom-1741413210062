name: TestDriver.ai / Run / Playwright / UI Mode

on:
  workflow_dispatch:

permissions:
  actions: read
  contents: write
  statuses: write
  pull-requests: write

jobs:
  gather-test-files:
    name: Setup Test Matrix (./testdriver/*.yml.spec.js)
    runs-on: ubuntu-latest
    outputs:
      test_files: ${{ steps.test_list.outputs.files }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.ref }}
      - name: Find all test files and extract filenames
        id: test_list
        run: |
          FILES=$(ls ./testdriver/*.yml.spec.js)
          FILENAMES=$(basename -a $FILES)
          FILES_JSON=$(echo "$FILENAMES" | jq -R -s -c 'split("\n")[:-1]')
          echo "::set-output name=files::$FILES_JSON"

  test:
    needs: gather-test-files
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test: ${{ fromJson(needs.gather-test-files.outputs.test_files) }}
      fail-fast: false
    name: ${{ matrix.test }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.ref }}

      - name: Display filename being tested
        run: |
          echo "Running job for file: ${{ matrix.test }}"
      
      - uses: testdriverai/action@main
        with:
          key: ${{ secrets.key }}
          prompt: /exit
          create-pr: true
          pr-base: main
          pr-title: "TestDriver.ai / Generate Playwright / ${{ matrix.test }}"
          pr-branch: testdriver/regression-${{ matrix.markdown }}-${{ github.run_id }}-${{ github.run_attempt }}
          pr-test-filename: ${{matrix.markdown}}.yml
          prerun: |
            # Enable strict mode to catch errors early
            Set-StrictMode -Version Latest
            $ErrorActionPreference = "Stop"

            # Step 1: Installing Playwright globally
            Write-Output "Step 1: Installing Playwright globally..."
            yarn global add playwright
            if ($LASTEXITCODE -ne 0) { Write-Error "Failed to install Playwright." }

            # Step 2: Installing Dashcam Chrome extension
            Write-Output "Step 2: Installing Dashcam Chrome extension..."
            yarn global add dashcam
            # dashcam CLI may be installed already?
            where.exe dashcam
            if ($LASTEXITCODE -ne 0) { Write-Error "Failed to install Dashcam." }

            yarn add dashcam-chrome
            if ($LASTEXITCODE -ne 0) { Write-Error "Failed to install Dashcam Chrome extension." }

            # Step 3: Installing Playwright dependencies
            Write-Output "Step 3: Installing Playwright dependencies..."
            playwright install --with-deps chromium
            if ($LASTEXITCODE -ne 0) { Write-Error "Failed to install Playwright dependencies." }

            # Get the current directory
            Write-Output "Getting the current directory..."
            $CurrentDir = Get-Location
            Write-Output "Current directory: $CurrentDir"

            # Define the Playwright log file path
            Write-Output "Defining Playwright log file path..."
            $PlaywrightLogFile = Join-Path -Path $CurrentDir -ChildPath "testdriver/playwright.log"

            Write-Output "Playwright log file path: $PlaywrightLogFile"

            # Validate if Dashcam is installed and in PATH
            Write-Output "Checking if Dashcam is installed..."
            $DashcamCommand = Get-Command dashcam -ErrorAction SilentlyContinue
            if (-not $DashcamCommand) {
                Write-Error "Dashcam is not found in the system PATH. Please check the installation."
                exit 1
            }

            # Run the dashcam track command with the resolved Playwright log file path
            Write-Output "Running dashcam track command..."
            C:\Users\testdriver\AppData\Local\Yarn\bin\dashcam track --name=playwright --type=application --pattern="$PlaywrightLogFile"

            # Logging before writing to the file
            Write-Output "Writing Playwright test output to: $PlaywrightLogFile"

            Write-Output "Current Directory:"
            Write-Output (Get-Location)

            Write-Output "Directory Contents:"
            Write-Output (Get-ChildItem)

            # Define the directory path
            $DashcamBuildDir = "C:\actions-runner\_work\testdriver\testdriver\node_modules\dashcam-chrome\build"

            # Check if the directory exists and log its contents
            if (Test-Path $DashcamBuildDir) {
                Write-Output "Contents of '$DashcamBuildDir' directory:"
                Get-ChildItem -Path $DashcamBuildDir | ForEach-Object { Write-Output $_.FullName }
            } else {
                Write-Error "'$DashcamBuildDir' directory does not exist!"
            }

            # Log the testdriver subdirectory contents
            $TestDir = "testdriver"
            if (Test-Path $TestDir) {
                Write-Output "Contents of '$TestDir' directory:"
                Write-Output (Get-ChildItem $TestDir)
            } else {
                Write-Error "'$TestDir' directory does not exist!"
            }

            # Log the test file path
            $TestFilePath = "$TestDir/${{ matrix.test }}"
            Write-Output "Running Playwright test with file: $TestFilePath"

            if (Test-Path $TestFilePath) {
                Write-Output "Test file exists: $TestFilePath"
            } else {
                Write-Error "Test file does NOT exist: $TestFilePath"
            }

            # Run Playwright test
            npx playwright test $TestFilePath --headed| Out-File -FilePath $PlaywrightLogFile -Encoding utf8

            Write-Output "Playwright test output has been written to: $PlaywrightLogFile"

            if ($LASTEXITCODE -ne 0) { 
                Write-Error "Playwright tests failed. Check $PlaywrightLogFile for details." 
            }

            if ($LASTEXITCODE -ne 0) { Write-Error "Playwright tests failed. Check $PlaywrightLogFile for details." }

            # Step 5: Completion
            Write-Output "Step 5: Completed."
            exit 0

        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          FORCE_COLOR: "3"
